/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package virionis.nikolas.monitoramento.java.swing;

import java.util.concurrent.ThreadLocalRandom;

/**
 *
 * @author USER
 */
public class Monitoramento extends javax.swing.JFrame {

    /**
     * Creates new form Monitoramento
     */
    public Monitoramento() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        progressCPU = new javax.swing.JProgressBar();
        progressDisco = new javax.swing.JProgressBar();
        progressRAM = new javax.swing.JProgressBar();
        lblCPU = new javax.swing.JLabel();
        lblRAM = new javax.swing.JLabel();
        lblDisco = new javax.swing.JLabel();
        lblMaxCpu = new javax.swing.JLabel();
        lblMinCpu = new javax.swing.JLabel();
        lblMedCpu = new javax.swing.JLabel();
        lblMaxCpuVal = new javax.swing.JLabel();
        lblMinCpuVal = new javax.swing.JLabel();
        lblMedCpuVal = new javax.swing.JLabel();
        lblMaxRam = new javax.swing.JLabel();
        lblMinRam = new javax.swing.JLabel();
        lblMaxRamVal = new javax.swing.JLabel();
        lblMedRam = new javax.swing.JLabel();
        lblMinRamVal = new javax.swing.JLabel();
        lblMedRamVal = new javax.swing.JLabel();
        lblMaxDisco = new javax.swing.JLabel();
        lblMinDisco = new javax.swing.JLabel();
        lblMaxDiscoVal = new javax.swing.JLabel();
        lblMedDisco = new javax.swing.JLabel();
        lblMinDiscoVal = new javax.swing.JLabel();
        lblMedDiscoVal = new javax.swing.JLabel();
        selectRAM = new javax.swing.JComboBox<>();
        selectDisco = new javax.swing.JComboBox<>();
        btnDados = new javax.swing.JButton();
        selectCPU = new javax.swing.JComboBox<>();
        lblMedicaoCPU = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblMedicaoCPUVal = new javax.swing.JLabel();
        lblMedicaoCpuVal = new javax.swing.JLabel();
        lblMedicaoRAM = new javax.swing.JLabel();
        lblMedicaoRamVal = new javax.swing.JLabel();
        lblMedicaoDisco = new javax.swing.JLabel();
        lblMedicaoDiscoVal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setFont(new java.awt.Font("Segoe Print", 3, 18)); // NOI18N
        lblTitulo.setText("Monitoramento componentes computador");
        lblTitulo.setToolTipText("Monitoramento");

        progressCPU.setToolTipText("0 - 100%");
        progressCPU.setStringPainted(true);

        progressDisco.setToolTipText("0 - 100%");
        progressDisco.setStringPainted(true);

        progressRAM.setToolTipText("0 - 100%");
        progressRAM.setStringPainted(true);

        lblCPU.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        lblCPU.setLabelFor(progressCPU);
        lblCPU.setText("CPU");

        lblRAM.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        lblRAM.setLabelFor(progressRAM);
        lblRAM.setText("Memória");

        lblDisco.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        lblDisco.setLabelFor(progressDisco);
        lblDisco.setText("Disco");

        lblMaxCpu.setText("Máximo:  ");

        lblMinCpu.setText("Mínimo:  ");

        lblMedCpu.setText("Média:  ");

        lblMaxCpuVal.setText("0");

        lblMinCpuVal.setText("0");

        lblMedCpuVal.setText("0");

        lblMaxRam.setText("Máximo:  ");

        lblMinRam.setText("Mínimo:  ");

        lblMaxRamVal.setText("0");

        lblMedRam.setText("Média:  ");

        lblMinRamVal.setText("0");

        lblMedRamVal.setText("0");

        lblMaxDisco.setText("Máximo:  ");

        lblMinDisco.setText("Mínimo:  ");

        lblMaxDiscoVal.setText("0");

        lblMedDisco.setText("Média:  ");

        lblMinDiscoVal.setText("0");

        lblMedDiscoVal.setText("0");

        selectRAM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%", "Mb" }));
        selectRAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRAMActionPerformed(evt);
            }
        });

        selectDisco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%", "Gb" }));
        selectDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDiscoActionPerformed(evt);
            }
        });

        btnDados.setText("Fazer leitura dos dados");
        btnDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDadosActionPerformed(evt);
            }
        });

        selectCPU.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%" }));
        selectCPU.setEnabled(false);
        selectCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCPUActionPerformed(evt);
            }
        });

        lblMedicaoCPU.setText("Medição: ");

        lblMedicaoCpuVal.setText("0");

        lblMedicaoRAM.setText("Medição: ");

        lblMedicaoRamVal.setText("0");

        lblMedicaoDisco.setText("Medição: ");

        lblMedicaoDiscoVal.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMinDisco)
                                    .addComponent(lblMaxDisco))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMaxDiscoVal, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMinDiscoVal, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(progressDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblDisco)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMedDisco)
                                .addGap(18, 18, 18)
                                .addComponent(lblMedDiscoVal, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMedRam)
                                .addGap(18, 18, 18)
                                .addComponent(lblMedRamVal, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMinRam)
                                    .addComponent(lblMaxRam))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMaxRamVal, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMinRamVal, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblRAM)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(progressRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMedicaoRAM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMedicaoRamVal, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMedicaoDisco)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMedicaoDiscoVal, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDados, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMedicaoCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMedicaoCpuVal, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMedicaoCPUVal))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblCPU)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMedCpu)
                        .addGap(18, 18, 18)
                        .addComponent(lblMedCpuVal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMinCpu)
                            .addComponent(lblMaxCpu))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaxCpuVal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMinCpuVal, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addGap(24, 24, 24)
                .addComponent(lblCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDados, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaxCpu)
                            .addComponent(lblMaxCpuVal))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMinCpu)
                            .addComponent(lblMinCpuVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedCpu)
                            .addComponent(lblMedCpuVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedicaoCPU)
                            .addComponent(jLabel2)
                            .addComponent(lblMedicaoCPUVal)
                            .addComponent(lblMedicaoCpuVal))
                        .addGap(26, 26, 26)
                        .addComponent(lblRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaxRam)
                            .addComponent(lblMaxRamVal))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMinRam)
                            .addComponent(lblMinRamVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedRam)
                            .addComponent(lblMedRamVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedicaoRAM)
                            .addComponent(lblMedicaoRamVal))
                        .addGap(21, 21, 21)
                        .addComponent(lblDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(progressDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaxDisco)
                            .addComponent(lblMaxDiscoVal))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMinDisco)
                            .addComponent(lblMinDiscoVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedDisco)
                            .addComponent(lblMedDiscoVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedicaoDisco)
                            .addComponent(lblMedicaoDiscoVal))
                        .addContainerGap(54, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // escolha de unidade de ram
    private void selectRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRAMActionPerformed
        ramPercent = selectRAM.getSelectedIndex() == 0;
        // visualização personalizada pela unidade chamada em cada mudança de unidade
        atualizarRAM();
    }//GEN-LAST:event_selectRAMActionPerformed

    // escolha de unidade de disco
    private void selectDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDiscoActionPerformed
        discoPercent = selectDisco.getSelectedIndex() == 0;
        // visualização personalizada pela unidade chamada em cada mudança de unidade
        atualizarDisco();
    }//GEN-LAST:event_selectDiscoActionPerformed
    private void gerarDados() {
        medicaoCPU = ThreadLocalRandom.current().nextInt(1, 90);
        medicaoDisco = ThreadLocalRandom.current().nextInt(10, 900);
        medicaoRAM = ThreadLocalRandom.current().nextInt(100, 7500);
    }

    private void atualizarSomas() {
        somaRAM += medicaoRAM;
        somaDisco += medicaoDisco;
        somaCPU += medicaoCPU;
    }

    private void atualizarMaximos() {
        if (medicaoCPU > maxCPU) {
            maxCPU = medicaoCPU;
        }
        if (medicaoRAM > maxRAM) {
            maxRAM = medicaoRAM;
        }
        if (medicaoDisco > maxDisco) {
            maxDisco = medicaoDisco;
        }
    }

    private void atualizarMinimos() {
        if (medicaoCPU < minCPU) {
            minCPU = medicaoCPU;
        }
        if (medicaoRAM < minRAM) {
            minRAM = medicaoRAM;
        }
        if (medicaoDisco < minDisco) {
            minDisco = medicaoDisco;
        }
    }

    // botão pressionado
    private void btnDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDadosActionPerformed
        // incremento do numero de iterações (clicks no botão):
        iteracoes++;
        // randomicamente gerando valores para cpu, ram e disco 
        gerarDados();
        // soma dos valores (totais) às somas de cada componente
        atualizarSomas();
        // verificação para máximas medições
        atualizarMaximos();
        // verificação para mínimas medições
        atualizarMinimos();
        // visualizações dos dados
        atualizarRAM();
        atualizarDisco();
        atualizarCPU();
    }//GEN-LAST:event_btnDadosActionPerformed

    private void selectCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCPUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectCPUActionPerformed

    private void atualizarRAM() {
        // %
        if (ramPercent) {
            atualizarTooltips(progressRAM, "0 - 100%"); // tooltip de acordo c/ unidade
            
            atualizarMaximoBarra(progressRAM, 100); // máximo da unidade (%)
            
            atualizarValorBarra(progressRAM, getValue(8000, medicaoRAM, ramPercent)); // valor da medição na barra de progresso
            
            setLabels(progressRAM, lblMedicaoRamVal, lblMaxRamVal,
                    lblMinRamVal, getValue(8000, maxRAM, ramPercent) + "%",
                    getValue(8000, minRAM, ramPercent) + "%",
                    getValue(8000, medicaoRAM, ramPercent) + "%");
            
            showMedia(lblMedRamVal, getMedia(ramPercent, somaRAM, 8000), "%");
        } // Mb
        else {
            atualizarTooltips(progressRAM, "0 - 8000Mb"); // tooltip de acordo c/ unidade
            
            atualizarMaximoBarra(progressRAM, 8000); // máximo da unidade (Mb)
            
            atualizarValorBarra(progressRAM, getValue(8000, medicaoRAM, ramPercent)); // valor da medição na barra de progresso
            
            setLabels(progressRAM, lblMedicaoRamVal, lblMaxRamVal,
                    lblMinRamVal, maxRAM + "Mb", minRAM + "Mb", medicaoRAM + "Mb");
            
            showMedia(lblMedRamVal, getMedia(ramPercent, somaRAM, 8000), "Mb");
        }
    }

    private void atualizarDisco() {
        // %
        if (discoPercent) {
            atualizarTooltips(progressDisco, "0 - 100%"); // tooltip de acordo c/ unidade
            
            atualizarMaximoBarra(progressDisco, 100); // máximo da unidade (%)
            
            atualizarValorBarra(progressDisco, getValue(1000, medicaoDisco, discoPercent)); // valor da medição na barra de progresso
            
            setLabels(progressDisco, lblMedicaoDiscoVal, lblMaxDiscoVal,
                    lblMinDiscoVal, getValue(1000, maxDisco, discoPercent) + "%",
                    getValue(1000, minDisco, discoPercent) + "%", getValue(1000,
                    medicaoDisco, discoPercent) + "%");
            
            showMedia(lblMedDiscoVal, getMedia(discoPercent, somaDisco, 1000), "%");
        } // Gb
        else {
            atualizarTooltips(progressDisco, "0 - 1000Gb"); // tooltip de acordo c/ unidade
            
            atualizarMaximoBarra(progressDisco, 1000); // máximo da unidade (%)
            
            atualizarValorBarra(progressDisco, getValue(1000, medicaoDisco, discoPercent)); // valor da medição na barra de progresso
            
            setLabels(progressDisco, lblMedicaoDiscoVal, lblMaxDiscoVal,
                    lblMinDiscoVal, maxDisco + "Gb", minDisco + "Gb", medicaoDisco + "Gb");
            
            showMedia(lblMedDiscoVal, getMedia(discoPercent, somaDisco, 1000), "Gb");
        }
    }

    private void atualizarCPU() {
        // %
        atualizarMaximoBarra(progressCPU, 100); // máximo da unidade (%)
        
        atualizarValorBarra(progressCPU, medicaoCPU); // valor da medição na barra de progresso
        
        setLabels(progressCPU, lblMedicaoCpuVal, lblMaxCpuVal,
                lblMinCpuVal, maxCPU + "%", minCPU + "%", medicaoCPU + "%");
        
        showMedia(lblMedCpuVal, getMedia(true, somaCPU, 100), "%");
}

    private void setLabels(javax.swing.JProgressBar string, javax.swing.JLabel lblMedicao, javax.swing.JLabel lblMax,
            javax.swing.JLabel lblMin, String max, String min, String medicao) {
        string.setString(medicao);
        lblMedicao.setText(medicao);
        lblMax.setText(max);
        lblMin.setText(min);

    }
    
    private void showMedia(javax.swing.JLabel lbl, Double val, String unidade){
        lbl.setText(String.format("%.2f%s", val, unidade));
    }

    private Double getMedia(Boolean percent, Integer soma, Integer divisor) {
        if (percent) {
            if (iteracoes <= 2) {
                Integer mediaInt = (soma * 100) / (divisor * iteracoes);
                return mediaInt * 100 / 100d;
            }
            
            Integer mediaInt = (soma * 100 / iteracoes);
            return mediaInt / (divisor * 1d);

        }

        Integer mediaInt = soma * 100 / iteracoes;
        return mediaInt / 100d;

    }

    private Integer getValue(Integer max, Integer num, Boolean percent) {
        return percent ? (num * 100) / max : num;
    }

    private void atualizarValorBarra(javax.swing.JProgressBar prg, Integer val) {
        prg.setValue(val);
    }

    private void atualizarTooltips(javax.swing.JProgressBar prg, String tip) {
        prg.setToolTipText(tip);
    }

    private void atualizarMaximoBarra(javax.swing.JProgressBar prg, Integer max) {
        prg.setMaximum(max);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Monitoramento().setVisible(true);
            }
        });

    }
    private Integer maxCPU = 0;
    private Integer minCPU = Integer.MAX_VALUE;
    private Integer maxRAM = 0;
    private Integer minRAM = Integer.MAX_VALUE;
    private Integer maxDisco = 0;
    private Integer minDisco = Integer.MAX_VALUE;
    private Boolean ramPercent = true;
    private Boolean discoPercent = true;
    private Integer somaCPU = 0;
    private Integer somaRAM = 0;
    private Integer somaDisco = 0;
    private Integer iteracoes = 0;
    private Integer medicaoRAM;
    private Integer medicaoCPU;
    private Integer medicaoDisco;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDados;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblCPU;
    private javax.swing.JLabel lblDisco;
    private javax.swing.JLabel lblMaxCpu;
    private javax.swing.JLabel lblMaxCpuVal;
    private javax.swing.JLabel lblMaxDisco;
    private javax.swing.JLabel lblMaxDiscoVal;
    private javax.swing.JLabel lblMaxRam;
    private javax.swing.JLabel lblMaxRamVal;
    private javax.swing.JLabel lblMedCpu;
    private javax.swing.JLabel lblMedCpuVal;
    private javax.swing.JLabel lblMedDisco;
    private javax.swing.JLabel lblMedDiscoVal;
    private javax.swing.JLabel lblMedRam;
    private javax.swing.JLabel lblMedRamVal;
    private javax.swing.JLabel lblMedicaoCPU;
    private javax.swing.JLabel lblMedicaoCPUVal;
    private javax.swing.JLabel lblMedicaoCpuVal;
    private javax.swing.JLabel lblMedicaoDisco;
    private javax.swing.JLabel lblMedicaoDiscoVal;
    private javax.swing.JLabel lblMedicaoRAM;
    private javax.swing.JLabel lblMedicaoRamVal;
    private javax.swing.JLabel lblMinCpu;
    private javax.swing.JLabel lblMinCpuVal;
    private javax.swing.JLabel lblMinDisco;
    private javax.swing.JLabel lblMinDiscoVal;
    private javax.swing.JLabel lblMinRam;
    private javax.swing.JLabel lblMinRamVal;
    private javax.swing.JLabel lblRAM;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JProgressBar progressCPU;
    private javax.swing.JProgressBar progressDisco;
    private javax.swing.JProgressBar progressRAM;
    private javax.swing.JComboBox<String> selectCPU;
    private javax.swing.JComboBox<String> selectDisco;
    private javax.swing.JComboBox<String> selectRAM;
    // End of variables declaration//GEN-END:variables
}
